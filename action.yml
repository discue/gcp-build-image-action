name: "GCP Build Image"
description: "Build and push container images to Google Cloud using Cloud Build"
author: "discue"

inputs:
  image:
    description: "The full image URL to build (e.g., europe-west3-docker.pkg.dev/project/repository/image)"
    required: true

  region:
    description: "Google Cloud region to use for the build (e.g., europe-west3). If not set, defaults to the gcloud default region."
    required: false

  impersonate:
    description: "Service account email to impersonate for to submit the gcloud build. If not set, uses the default credentials."
    required: false

  build_service_account:
    description: "Service account email to use for the Cloud Build execution. If not set, uses the default Cloud Build service account."
    required: false

  quiet:
    description: "Run in quiet mode. Suppress all non-error output. Default is true."
    required: false
    default: "true"

  source:
    description: "Source directory to build (relative to the repository root). Default is the repository root."
    required: false
    default: "."

  builder:
    description: "Build method: '' (default for autodetection), 'buildpack' or 'dockerfile'"
    required: false
    default: ""

  staging_bucket_name:
    description: "Cloud Storage bucket name to use for staging (without gs:// or path). If empty, defaults to GCP default e.g. $project_$region_cloudbuild."
    required: false
    default: ""

  staging_bucket_dir:
    description: "Directory within the Cloud Storage bucket to use for staging. Defaults to 'builds'."
    required: false
    default: "builds"

outputs:
  image-url:
    description: "The built image URL"
    value: ${{ steps.build.outputs.image-url }}

runs:
  using: "composite"
  steps:
    - name: Build image with Cloud Build
      id: build
      shell: bash
      run: |
        # Initialize all variables at the beginning
        BUCKET_NAME_INPUT="${{ inputs.staging_bucket_name }}"
        BUCKET_DIR_INPUT="${{ inputs.staging_bucket_dir }}"
        BUILDER_INPUT="${{ inputs.builder }}"
        IMAGE_INPUT="${{ inputs.image }}"
        IMPERSONATE_INPUT="${{ inputs.impersonate }}"
        QUIET_INPUT="${{ inputs.quiet }}"
        REGION_INPUT="${{ inputs.region }}"
        SOURCE_INPUT="${{ inputs.source }}"
        BUILD_SERVICE_ACCOUNT_INPUT="${{ inputs.build_service_account }}"

        QUIET_FLAG=""
        if [[ "$QUIET_INPUT" == "true" ]]; then
          QUIET_FLAG="--quiet"
        fi

        IMPERSONATE_FLAG=""
        if [[ -n "$IMPERSONATE_INPUT" ]]; then
          IMPERSONATE_FLAG="--impersonate-service-account=$IMPERSONATE_INPUT"
        fi

        if [[ -n "$REGION_INPUT" ]]; then
          gcloud config set builds/region "$REGION_INPUT"
        fi

        GCS_BUCKET=""
        if [[ -n "$BUCKET_NAME_INPUT" ]]; then
          GCS_BUCKET="gs://${BUCKET_NAME_INPUT}"
        fi

        GCS_BUCKET_FLAG="--gcs-source-staging-dir=\"$GCS_BUCKET/$BUCKET_DIR_INPUT\""

        BUILD_METHOD="$BUILDER_INPUT"
        if [[ -z "$BUILD_METHOD" ]]; then
          if [[ -f "$SOURCE_INPUT/Dockerfile" ]]; then
            BUILD_METHOD="dockerfile"
          else
            BUILD_METHOD="buildpack"
          fi
        fi

        echo "Building image: $IMAGE_INPUT"
        echo "Source directory: $SOURCE_INPUT"
        ls -l $SOURCE_INPUT

        BUILD_SERVICE_ACCOUNT_FLAG=""
        if [[ -n "$BUILD_SERVICE_ACCOUNT_INPUT" ]]; then
          BUILD_SERVICE_ACCOUNT_FLAG="--service-account=$BUILD_SERVICE_ACCOUNT_INPUT"
        fi

        # Merge all flags just before the submit command
        FLAGS="${QUIET_FLAG} ${IMPERSONATE_FLAG} ${GCS_BUCKET_FLAG} ${BUILD_SERVICE_ACCOUNT_FLAG}"
        eval gcloud builds submit --config cloudbuild.yaml $FLAGS "$SOURCE_INPUT"

        echo "image-url=${IMAGE_INPUT}" >> $GITHUB_OUTPUT
        echo "Successfully built image: $IMAGE_INPUT"

branding:
  icon: "package"
  color: "green"
